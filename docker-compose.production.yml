version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "${PORT:-3000}:3000"
    environment:
      - NODE_ENV=production
      - PORT=${PORT:-3000}
      - DATABASE_URL=${DATABASE_URL}
      - POSTGRES_HOST=${POSTGRES_HOST:-postgres}
      - POSTGRES_PORT=${POSTGRES_PORT:-5432}
      - POSTGRES_DB=${POSTGRES_DB:-primesms}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - SESSION_SECRET=${SESSION_SECRET}
      - META_ACCESS_TOKEN=${META_ACCESS_TOKEN}
      - META_PHONE_NUMBER_ID=${META_PHONE_NUMBER_ID}
      - META_VERIFY_TOKEN=${META_VERIFY_TOKEN}
      - META_APP_SECRET=${META_APP_SECRET}
      - META_APP_SECRET_2=${META_APP_SECRET_2}
      - WEBHOOK_DEBUG_TOKEN=${WEBHOOK_DEBUG_TOKEN}
      - N8N_WEBHOOK_URL=${N8N_WEBHOOK_URL}
      - GRAPH_API_VERSION=${GRAPH_API_VERSION:-v22.0}
      - COOLIFY_DEPLOYMENT=true
    depends_on:
      - postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  postgres:
    image: postgres:15
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-primesms}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migration_add_app_secret.sql:/docker-entrypoint-initdb.d/01-migration_add_app_secret.sql
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data: